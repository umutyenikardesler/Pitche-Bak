import React, { useState } from 'react';
import { View, Text, TouchableOpacity, FlatList, Switch, StyleSheet, Platform } from 'react-native';
import { supabase } from '@/services/supabase';
import '@/global.css';

interface SquadSelectorProps {
  isSquadIncomplete: boolean;
  setIsSquadIncomplete: (incomplete: boolean) => void;
  missingPositions: any;
  setMissingPositions: (positions: any) => void;
}

export const SquadSelector: React.FC<SquadSelectorProps> = ({
  isSquadIncomplete,
  setIsSquadIncomplete,
  missingPositions,
  setMissingPositions,
}) => {
  const handlePositionSelection = (position: string) => {
    setMissingPositions((prev: any) => ({
      ...prev,
      [position]: { ...prev[position], selected: !prev[position].selected },
    }));
  };

  const handleCountChange = (position: string, value: number) => {
    setMissingPositions((prev: any) => ({
      ...prev,
      [position]: { ...prev[position], count: value },
    }));
  };

  const ItemSeparator = () => (
    <View style={styles.separator} />
  );

  return (
    <View className="mb-4">
      <Text className="text-green-700 font-semibold mb-2">Kadro Eksik mi?</Text>
      <Switch
        value={isSquadIncomplete}
        onValueChange={setIsSquadIncomplete}
        trackColor={{ false: "#d1d5db", true: "#5ea500" }} // Açık ve kapalı rengi belirler
        thumbColor={Platform.OS === "android" ? "#ffffff" : undefined} // Android için beyaz başlatma noktası
        ios_backgroundColor="#d1d5db" // iOS için kapalıyken arka plan rengi
        style={{ transform: [{ scaleX: -1 }] }} // **Switch'i terse çevirerek** iOS ve Android'de sol başlangıç
      />

      {isSquadIncomplete && (
        <View>
          <Text className="text-green-700 font-semibold mb-2 mt-2">Eksik Mevkileri Seçin</Text>
        
          <View style={styles.container}>
            {/* İlk satır: Kaleci ve Defans */}
            <View style={styles.row}>
              {['kaleci', 'defans'].map((position) => (
                <View key={position} style={styles.buttonWrapper}>
                  <TouchableOpacity
                    style={styles.button}
                    onPress={() => handlePositionSelection(position)}
                  >
                    <Text style={styles.buttonText}>
                      {position.charAt(0).toUpperCase() + position.slice(1)}
                    </Text>
                  </TouchableOpacity>

                  {missingPositions[position] && missingPositions[position].selected && (
                    <View style={styles.countSelector}>
                      <Text style={styles.countText}>Kaç {position} eksik?</Text>
                      <FlatList
                        horizontal
                        data={Array.from({ length: position === 'kaleci' ? 2 : 3 }, (_, i) => i + 1)}
                        keyExtractor={(item) => item.toString()}
                        renderItem={({ item }) => (
                          <TouchableOpacity
                            style={[
                              styles.countButton,
                              missingPositions[position].count === item && styles.countButtonSelected
                            ]}
                            onPress={() => handleCountChange(position, item)}
                          >
                            <Text style={missingPositions[position].count === item ? styles.countButtonTextSelected : styles.countButtonText}>
                              {item}
                            </Text>
                          </TouchableOpacity>
                        )}
                        ItemSeparatorComponent={() => <View style={{ width: 5 }} />}
                      />
                    </View>
                  )}
                </View>
              ))}
            </View>

            {/* İkinci satır: Orta Saha ve Forvet */}
            <View style={styles.row}>
              {['ortaSaha', 'forvet'].map((position) => (
                <View key={position} style={styles.buttonWrapper}>
                  <TouchableOpacity
                    style={styles.button}
                    onPress={() => handlePositionSelection(position)}
                  >
                    <Text style={styles.buttonText}>
                      {position.charAt(0).toUpperCase() + position.slice(1)}
                    </Text>
                  </TouchableOpacity>

                  {missingPositions[position] && missingPositions[position].selected && (
                    <View style={styles.countSelector}>
                      <Text style={styles.countText}>Kaç {position} eksik?</Text>
                      <FlatList
                        horizontal
                        data={Array.from({ length: 3 }, (_, i) => i + 1)}
                        keyExtractor={(item) => item.toString()}
                        renderItem={({ item }) => (
                          <TouchableOpacity
                            style={[
                              styles.countButton,
                              missingPositions[position].count === item && styles.countButtonSelected
                            ]}
                            onPress={() => handleCountChange(position, item)}
                          >
                            <Text style={missingPositions[position].count === item ? styles.countButtonTextSelected : styles.countButtonText}>
                              {item}
                            </Text>
                          </TouchableOpacity>
                        )}
                        ItemSeparatorComponent={() => <View style={{ width: 5 }} />}
                      />
                    </View>
                  )}
                </View>
              ))}
            </View>
          </View>

        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  separator: {
    width: 5, // Ayırıcı genişliği (isteğinize göre ayarlayın)
    height: '100%', // Ayırıcının yüksekliği (isteğe göre ayarlayın)
    backgroundColor: 'transparent', // veya ayırıcı rengi (örn. '#000000')
  },
  flatList: {
    marginHorizontal: 10, // FlatList'in yatay boşluğu (isteğe bağlı)
  },
  container: {
    flexDirection: 'column',
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between', // Butonlar yan yana dizilir
    marginBottom: 10,
  },
  buttonWrapper: {
    width: '49%', // %50 yerine %48 verdik, margin hatası yaşamamak için
  },
  button: {
    backgroundColor: '#16a34a', // Tailwind'deki bg-green-600 rengi
    paddingVertical: 12,
    paddingHorizontal: 12,
    borderRadius: 8,
    // alignItems: 'center',
    // justifyContent: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    // fontWeight: 'bold',
  },
  countSelector: {
    marginTop: 10,
    
  },
  countText: {
    color: '#4b5563', // Tailwind'deki text-gray-600
    // textAlign: 'center',
    marginBottom: 5,
  },
  countButton: {
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#006400',
    backgroundColor: '#d1d5db', // Tailwind'deki bg-gray-300
    marginBottom: 10,
  },
  countButtonSelected: {
    backgroundColor: '#16a34a', // Tailwind'deki bg-green-600
    borderColor: '#16a34a',
  },
  countButtonText: {
    color: 'black',
    fontSize: 16,
  },
  countButtonTextSelected: {
    color: 'white',
    fontSize: 16,
  },
});